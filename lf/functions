# vim:ft=conf
# Custom Function

%mkdir -p ~/.trash
%mkdir -p ~/Android

cmd mkdir %printf "Directory Name: "; read and; mkdir $and; lf -remote 'send reload'
cmd mkfile %printf "File Name: "; read and; touch $and; lf -remote 'send reload'

# Func that doesn't deletes file but just moves them to .trash folder
# cmd trash %set -f; mv "$fx" ~/.trash
cmd clear_trash % rm -rf ~/.trash/*

cmd yank-path &{{
  printf '%s' "$fx" | wl-copy
  lf -remote 'send reload'
}}

cmd trash ${{
  trash="~/.trash/"
  for file in "$fx"
  do
    mv "$file" "$trash"
  done
  lf -remote "send reload"
}}

# Open the lfrc config file from anywhere
cmd lfrc ${{
  $EDITOR "$HOME"/.config/lf/lfrc
  lf -remote "send $id source ~/.config/lf/lfrc"
}}

cmd open ${{
  case $(file --mime-type "$f" -bL) in
    text/plain) $EDITOR "$f" ;;
    text/x-shellscript) $EDITOR "$f" ;; # Executable shell scripts
    application/javascript) $EDITOR "$f" ;; # Needed for json files
    application/json) $EDITOR "$f" ;; # Apparrently This is needed for json files
    inode/x-empty) $EDITOR "$f" ;; # All empty files, that are created using mkfile
    application/octet-stream) xdg-open "$f" ;;
    text/*) $EDITOR "$f" ;;
    *) xdg-open "$f" ;;
  esac
}}

cmd chmod %{{
	printf "Mode Bits: "
	read and

	for file in "$fx"
	do
		chmod $and "$file"
	done
	lf -remote 'send reload'
}}

cmd unarchive ${{
# This part creates the directory for extracting files
  a="${f%%.*}"
  mkdir -p "$a"

  case "$f" in
    *.zip) unzip -d "$a" "$f" ;;
    *.tar.gz) tar -xzvf "$f" -C "$a" ;;
    *.tar.xz) tar -xvf "$f" -C "$a" ;;
    *.tar.bz2) tar -xjvf "$f" -C "$a" ;;
    *.tar) tar -xvf "$f" -C "$a" ;;
    *.rar) unrar x "$f" "$a" ;;
    *.7z) 7z x "$f" -o"$a" ;;
    *) echo "Unsupported Format" ;;
  esac
}}

cmd setwallpaper &{{
  # cp "$f" ~/.config/wall.jpg;
  # swaybg -m fill -i ~/.config/wall.jpg &
  wallbg="$HOME/scripts/wallbg"
  $wallbg "$f"
  lf -remote 'send reload'
}}

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# Jump to directories using fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 2 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi

    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd selectRandom %{{
  res="$(find . -maxdepth 1 | shuf -n 1 )"
  if [ -d "$res" ] ; then
      cmd="cd"
  elif [ -f "$res" ] ; then
      cmd="select"
  else
      exit 0
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd newDir %{{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f")\""
}}

# c (select for copy) and P to paste soft-link
# x (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd singlePane %{{
    lf -remote "send $id :set preview!; set ratios 1; set info size:time;"
}}

cmd default %{{
    lf -remote "send $id :set ratios 1:2:2; set info; set preview"
    # or just
    # lf -remote "send $id source ~/.config/lf/lfrc"
}}
