# Basic Settings

set shell zsh
set shellopts '-euy'
set ifs "\n"

set hidden true # Hidden Files
set ignorecase true # Ignore case when searching
set scrolloff 10 # Leaves space on Top and Bottom of the screen
set drawbox true # Shows the box around the panes
set mouse true
set icons true # Icons(Needs a Icons file or LF_ICONS env variable)
set dircounts false # shows number of files in dir instead of total size
set preview true
set sixel true
set previewer ~/.config/lf/preview
set ratios 1:2:2
set cursorpreviewfmt "\033[7m"

# Sort Downloads directory by creation time, reverse
setlocal ~/Downloads/ sortby ctime
setlocal ~/Downloads/ info ctime
setlocal ~/Downloads/ reverse

# Remove some default keybindings
map m #gets in the way of mkdir, mkfile
map n #gets in the way of unarchive
map u #used for unselect, gets in the way of unarchive
map d #used for cut, get in way of trash func
map e #opens editor, not needed
map y #used for copy
map f #used for find (Not sure how it worked)

# Custom Key mappings
map ` shell
map x cut
map c copy
map P :paste; clear
map p :paste-async
map f search # Works like vim / search
map D $rm -rf $fx
map n $nvim .
map <delete> delete
map <esc> unselect
map <backspace2> clear # Clears any cut/copy highlighter
map e $$f # Execute the selected file, must be executable
map oc lfrc
map op &xdg-open $f
map J :updir; down; open # Move down in parent directory
map K :updir; up; open # Move up in parent directory
map sf :set info size
map . :calcdirsize; down; # Calculate the directory size in the editor without NCDU

# Function Bindings
map md mkdir
map mf mkfile
map mp chmod #use 664, 777 notation rather than u+x
map dd trash
map <enter> open
map ua Unarchive
map F :fzf_jump
map R bulk-rename
map bg setwallpaper
map du directory_size # Requires ncdu utility

# Movement Bindings
map gh cd ~ # This is default
map g/ cd /
map gD cd ~/Documents
map gd cd ~/Downloads
map gc cd ~/.config
map gw cd ~/wallpapers/Images/
map gps cd ~/Pictures
map gb cd ~/.local/bin
map gt cd ~/Test
map gT cd ~/.trash
map ga cd ~/Android
map gs cd ~/scripts
map g. cd ~/dotfiles/

map gr cd ~/repos/
map gn cd ~/Obsidian/Vault/
map gpp cd ~/Projects/Python/
map gpg cd ~/Projects/Go/
map gpw cd ~/Projects/Web/
map got cd ~/Projects/Web/TheOdinProject/

map gA cd /run/user/1001/07b84bc3_33cd_4b24_a7ac_af034681c2a5/storage/emulated/0/

# Custom Function

%mkdir -p ~/.trash
%mkdir -p ~/Android

cmd mkdir %printf "Directory Name: "; read and; mkdir $and; lf -remote 'send reload'
cmd mkfile %printf "File Name: "; read and; touch $and; lf -remote 'send reload'

# Func that doesn't deletes file but just moves them to .trash folder
cmd trash %set -f; mv "$fx" ~/.trash
cmd clear_trash % rm -rf ~/.trash/*

# Open the lfrc config file from anywhere
cmd lfrc ${{
  $EDITOR "$HOME"/.config/lf/lfrc
  lf -remote "send $id source ~/.config/lf/lfrc"
}}

cmd open ${{
  case $(file --mime-type "$f" -bL) in
    text/plain) $EDITOR "$f" ;;
    text/x-shellscript) $EDITOR "$f" ;; # Executable shell scripts
    application/javascript) $EDITOR "$f" ;; # Needed for json files
    application/json) $EDITOR "$f" ;; # Apparrently This is needed for json files
    inode/x-empty) $EDITOR "$f" ;; # All empty files, that are created using mkfile
    application/octet-stream) xdg-open "$f" ;;
    text/*) $EDITOR "$f" ;;
    *) xdg-open "$f" ;;
  esac
}}

cmd directory_size ${{
	ncdu "$f"
}}

cmd androidFs %{{
	sshfs -o follow_symlinks,IdentityFile=/home/sumit/.ssh/id_rsa u0a533@192.168.29.199:/data/data/com.termux/files/home/storage/shared/ -p 8022 /home/sumit/Android

}}

cmd chmod %{{
	printf "Mode Bits: "
	read and

	for file in "$fx"
	do
		chmod $and "$file"
	done
	lf -remote 'send reload'
}}

cmd Unarchive ${{
# This part creates the directory for extracting files
  a="${f%%.*}"
  mkdir -p "$a"

  case "$f" in
    *.zip) unzip -d "$a" "$f" ;;
    *.tar.gz) tar -xzvf "$f" -C "$a" ;;
    *.tar.xz) tar -xvf "$f" -C "$a" ;;
    *.tar.bz2) tar -xjvf "$f" -C "$a" ;;
    *.tar) tar -xvf "$f" -C "$a" ;;
    *.rar) unrar x "$f" "$a" ;;
    *.7z) 7z x "$f" -o"$a" ;;
    *) echo "Unsupported Format" ;;
  esac
}}

cmd setwallpaper &{{
  # cp "$f" ~/.config/wall.jpg;
  # swaybg -m fill -i ~/.config/wall.jpg &
  wallbg="$HOME/.local/bin/wallbg"
  $wallbg "$f"
  lf -remote 'send reload'
}}


# Convert all files to jpg and make them 1440p resolution
cmd convertToJpg &{{
  for file in "$fx"
	do
    mogrify -format jpg "$file"
    convert "$file" -resize 2560x1440 -quality 90 "$file"
	done
  lf -remote 'send reload'
}}

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# Jump to directories using fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi

    lf -remote "send $id $cmd \"$res\""
}}

cmd on-redraw %{{
    if [ $lf_width -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $lf_width -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
